type Query {
  """Get the current state"""
  getState: Model
  getPolls(id: Int, userId: Int): [Poll!]!
}

type Model {
  state: String!
  createdAt: Date!
}

"""An ISO-8601 Date."""
scalar Date

"""TODO: extends db.Poll"""
type Poll {
  options: [PollOption!]!
  id: Int!
  userId: Int!
  title: String!
  subtitle: String
  body: String!
  pollKind: String
  formJsonSchema: String
  createdAt: Date!
}

type PollOption {
  votes: [PollOptionVote!]!
  id: Int!
  pollId: Int!
  priority: Int
  description: String
  url: String
  formJsonSchema: String
  createdAt: Date!
}

type PollOptionVote {
  pollOptionId: Int!
  userId: Int!
  value: Int!
  formResponse: String
  createdAt: Date!
}

type Mutation {
  setState(
    """The new state, can't be 'WrongState'!."""
    newState: String!
  ): Boolean!
  getUser(name: String): User!
  registerUser(name: String): User!
  insertPoll(insert: PollInsert!): OwnerPoll!
  addPollOptions(pollId: Int!, options: [PollOptionInsert!]!): OwnerPoll!
  accessPoll(pollToken: String!): Poll!
  deletePoll(pollId: Int!): Poll
  votePoll(pollId: Int!, votes: [PollOptionVoteInsert!]!): ResultIntString!
}

type User {
  polls: [OwnerPoll!]!
  votes: [PollOptionVote!]!
  pollsWithVotes: [PollUser!]!
  id: Int!
  name: String
  refreshToken: String!
}

type OwnerPoll {
  votes: [PollOptionVote!]!
  poll: Poll!
  adminShareToken: String!
  voterShareToken: String!
}

type PollUser {
  userVotes: [PollUserVote!]!
  poll: Poll!
}

type PollUserVote {
  option: PollOption!
  vote: PollOptionVote!
}

input PollInsert {
  id: Int
  title: String!
  subtitle: String
  body: String!
  pollKind: String
  formJsonSchema: String
  options: [PollOptionInsert!]
}

input PollOptionInsert {
  id: Int
  priority: Int
  description: String
  url: String
  formJsonSchema: String
  createdAt: Date
}

"""
Int! when the operation was successful or String! when an error was encountered.
"""
type ResultIntString {
  ok: Int
  err: String
  isOk: Boolean!
}

input PollOptionVoteInsert {
  pollOptionId: Int!
  userId: Int!
  value: Int!
  formResponse: String
  createdAt: Date
}

type Subscription {
  onStateChange: Model!
}